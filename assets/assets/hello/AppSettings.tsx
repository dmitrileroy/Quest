/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { Button, TextField, Autocomplete, Checkbox, FormControlLabel, Link, SvgIcon } from '@mui/material';
import ExportIconImage from './assets/images/Export_icon.png';
import FontIconImage from './assets/images/Font_Icon.png';
import { ReactComponent as Delete1 } from './assets/images/Delete.svg';
import { ReactComponent as Delete2 } from './assets/images/Delete.svg';
import { ReactComponent as Delete3 } from './assets/images/Delete.svg';
import { styled } from '@mui/material/styles';
import PickExportType from './PickExportType';
import DarkModeSwitch from './DarkModeSwitch';
import ImportFontDialog from './ImportFontDialog';

 
const AppSettings1: any = styled("div")(({ theme }: any) =>({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 40px 40px 40px`,  
  boxSizing: `border-box`,  
}));
  
const Top: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const AppSettings2: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Divider: any = styled("div")({  
  backgroundColor: `rgba(229, 229, 229, 1)`,  
  height: `1px`,  
  width: `1336px`,  
  margin: `7px 0px 0px 0px`,  
});
  
const Column: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px 0px 0px 40px`,  
  boxSizing: `border-box`,  
  margin: `80px 0px 0px 0px`,  
});
  
const Title: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Frame56: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const SecTitleExport: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px 0px 10px 0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportIcon: any = styled("img")({  
  height: `26px`,  
  width: `24px`,  
  margin: `0px`,  
});
  
const Export: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Typography"]["H5"].fontStyle,  
  fontFamily: theme.typography["Typography"]["H5"].fontFamily,  
  fontWeight: theme.typography["Typography"]["H5"].fontWeight,  
  fontSize: theme.typography["Typography"]["H5"].fontSize,  
  letterSpacing: theme.typography["Typography"]["H5"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["H5"].textDecoration,  
  lineHeight: theme.typography["Typography"]["H5"].lineHeight,  
  textTransform: theme.typography["Typography"]["H5"].textTransform,  
  width: `272.85px`,  
  margin: `0px 0px 0px 16px`,  
}));
  
const ExportYourEntire: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `16px 0px 0px 0px`,  
});
  
const ExportYourEntireTxt: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportYourEntireAppS: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  flexGrow: `1`,  
  width: `333px`,  
  margin: `0px`,  
}));
  
const AutoAddedFrame: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `333px`,  
  margin: `16px 0px 0px 0px`,  
});
  
const ButtonContained: any = styled(Button)({  
  margin: `0px`,  
});
  
const ExportSettings: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const ExportColumn1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `440px`,  
  margin: `0px`,  
});
  
const ComponentsTitle: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Components: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `272.85px`,  
  margin: `0px`,  
}));
  
const ExportOptions: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `12px 0px 0px 0px`,  
});
  
const ExportType: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportType1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportType2: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const CreateReactApp: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 4px`,  
}));
  
const PickExportType1: any = styled(PickExportType)(({ theme }: any) =>({  
  margin: `12px 0px 0px 0px`,  
}));
  
const ImageAssetsFolderInp: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const TextFieldStandard: any = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExcludeSpecificSelec: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Autocomplete1: any = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const CheckBoxes: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Include: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `272.85px`,  
  margin: `0px`,  
}));
  
const Checkbox1: any = styled(Checkbox)({  
  alignSelf: `stretch`,  
  margin: `16px 0px 0px 0px`,  
});
  
const Frame60: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `16px 0px 0px 0px`,  
});
  
const Checkbox2: any = styled(Checkbox)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExportColumn2DesignS: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `440px`,  
  margin: `0px 0px 0px 70px`,  
});
  
const Top1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TopTxtAndLinks: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DesignSystem: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `272.85px`,  
  margin: `0px`,  
}));
  
const DuplicateAndMakeTxt: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `12px 0px 0px 0px`,  
});
  
const DuplicateTxt: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `333px`,  
  margin: `0px`,  
});
  
const DuplicateMakeYourOwn: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  width: `210px`,  
  height: `21px`,  
  margin: `0px`,  
}));
  
const Link1: any = styled(Link)(({ theme }: any) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px`,  
}));
  
const Link2: any = styled(Link)(({ theme }: any) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `6px 0px 0px 0px`,  
}));
  
const TimeStamp: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const LastSync: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Q26MinutesAgo: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Disabled"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px 0px 0px 10px`,  
}));
  
const DarkMode: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const DefaultTheme: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const DarkModeSwitch1: any = styled(DarkModeSwitch)(({ theme }: any) =>({  
  margin: `10px 0px 0px 0px`,  
}));
  
const TextFieldStandard1: any = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DesignSystemPath: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const TextFieldStandard2: any = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Divider1: any = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `6px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
  overflow: `hidden`,  
});
  
const Divider2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const Divider3: any = styled("div")(({ theme }: any) =>({  
  backgroundColor: `rgba(224, 224, 224, 1)`,  
  flexGrow: `1`,  
  height: `1px`,  
  margin: `0px`,  
}));
  
const DisplayFonts: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DisplayFonts1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Top2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DisplayFontsRow: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const SecTitleFonts: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px 0px 10px 0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FontIcon: any = styled("img")({  
  height: `26px`,  
  width: `24px`,  
  margin: `0px`,  
});
  
const DisplayFonts2: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Typography"]["H5"].fontStyle,  
  fontFamily: theme.typography["Typography"]["H5"].fontFamily,  
  fontWeight: theme.typography["Typography"]["H5"].fontWeight,  
  fontSize: theme.typography["Typography"]["H5"].fontSize,  
  letterSpacing: theme.typography["Typography"]["H5"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["H5"].textDecoration,  
  lineHeight: theme.typography["Typography"]["H5"].lineHeight,  
  textTransform: theme.typography["Typography"]["H5"].textTransform,  
  width: `148.51px`,  
  margin: `0px 0px 0px 16px`,  
}));
  
const QuestNativelyTxt: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `12px 0px 0px 0px`,  
});
  
const QuestNativelySupport: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  width: `438px`,  
  margin: `0px`,  
}));
  
const Link3: any = styled(Link)(({ theme }: any) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `6px 0px 0px 0px`,  
}));
  
const Fonts: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  margin: `20px 0px 0px 0px`,  
});
  
const Input1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  height: `18.37px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `290.74px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const FontFamilyName: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `290.63px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const FontWeight: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `217.63px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const Frame58: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Row: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName1: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input3: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField3: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input4: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q400: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon1: any = styled(SvgIcon)(({ theme }: any) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
}));
  
const Row1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField4: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container3: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input5: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName2: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField5: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container4: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input6: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName1: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField6: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container5: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input7: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q4001: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon2: any = styled(SvgIcon)(({ theme }: any) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
}));
  
const Row2: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField7: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container6: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input8: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName3: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField8: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container7: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input9: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName2: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField9: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container8: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input10: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q4002: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon3: any = styled(SvgIcon)(({ theme }: any) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
}));
  
const ButtonPadding: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `30px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ButtonContained1: any = styled(Button)({  
  margin: `0px`,  
});
  
const Space: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  height: `100px`,  
  margin: `80px 0px 0px 0px`,  
});
  
const ImportFontDialog1: any = styled(ImportFontDialog)(({ theme }: any) =>({  
  width: `295px`,  
  margin: `80px 0px 0px 0px`,  
}));
 
function AppSettings(): JSX.Element {
  return (
    <AppSettings1 >
       <Top >
         <AppSettings2 >
           {`App Settings`}
             </AppSettings2>
         <Divider >
         </Divider>
       </Top>
       <Column >
         <Title >
           <Frame56 >
             <SecTitleExport >
               <ExportIcon  src={ExportIconImage} alt={"Export_icon"}/>
               <Export >
                 {`Export`}
                   </Export>
             </SecTitleExport>
             <ExportYourEntire >
               <ExportYourEntireTxt >
                 <ExportYourEntireAppS >
                   {`Export your entire App structure`}
                     </ExportYourEntireAppS>
               </ExportYourEntireTxt>
               <AutoAddedFrame >
                 <ButtonContained variant="contained" size="small" color="primary"    > Export App </ButtonContained>
               </AutoAddedFrame>
             </ExportYourEntire>
           </Frame56>
         </Title>
         <ExportSettings >
           <ExportColumn1 >
             <ComponentsTitle >
               <Components >
                 {`Components`}
                   </Components>
             </ComponentsTitle>
             <ExportOptions >
               <ExportType >
                 <ExportType1 >
                   <ExportType2 >
                     {`Export Type:`}
                       </ExportType2>
                   <CreateReactApp >
                     {`Create React App`}
                       </CreateReactApp>
                 </ExportType1>
                 <PickExportType1   />
               </ExportType>
               <ImageAssetsFolderInp >
                 <TextFieldStandard variant="standard" size="medium"  label={`Image Assets Path`} helperText="Helper text"   />
               </ImageAssetsFolderInp>
               <ExcludeSpecificSelec >
                 <Autocomplete1 multiple       autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Excluded Components`}  /> )} />
               </ExcludeSpecificSelec>
               <CheckBoxes >
                 <Include >
                   {`Include`}
                     </Include>
                 <FormControlLabel  control={<Checkbox1  size="small" color="primary"/>} label={`Include "import React from 'react';" in every component`} />
                       <Frame60 >
                   <FormControlLabel  control={<Checkbox2 defaultChecked={true}  size="small" color="primary"/>} label={`Include imported fonts in export`} />
                       </Frame60>
               </CheckBoxes>
             </ExportOptions>
           </ExportColumn1>
           <ExportColumn2DesignS >
             <Top1 >
               <TopTxtAndLinks >
                 <DesignSystem >
                   {`Design System`}
                     </DesignSystem>
                 <DuplicateAndMakeTxt >
                   <DuplicateTxt >
                     <DuplicateMakeYourOwn >
                       {`Duplicate & make your own from: `}
                         </DuplicateMakeYourOwn>
                     <Link1 href="#" underline="hover"  >MUI Community Kit</Link1>
                   </DuplicateTxt>
                   <Link2 href="#" underline="hover"  >Learn More</Link2>
                 </DuplicateAndMakeTxt>
               </TopTxtAndLinks>
               <TimeStamp >
                 <LastSync >
                   {`Last Sync: `}
                     </LastSync>
                 <Q26MinutesAgo >
                   {`26 minutes ago`}
                     </Q26MinutesAgo>
               </TimeStamp>
               <DarkMode >
                 <DefaultTheme >
                   {`Default Theme:`}
                     </DefaultTheme>
                 <DarkModeSwitch1   />
               </DarkMode>
             </Top1>
             <TextFieldStandard1 variant="standard" size="medium"  label={`Design System  Name`} helperText="Helper text"   />
             <DesignSystemPath >
               <TextFieldStandard2 variant="standard" size="medium"  label={`Design System Images Path`} helperText="Helper text"   />
             </DesignSystemPath>
           </ExportColumn2DesignS>
         </ExportSettings>
         <Divider1 >
           <Divider2 >
             <Divider3 >
             </Divider3>
           </Divider2>
         </Divider1>
         <DisplayFonts >
           <DisplayFonts1 >
             <Top2 >
               <DisplayFontsRow >
                 <SecTitleFonts >
                   <FontIcon  src={FontIconImage} alt={"Font Icon"}/>
                   <DisplayFonts2 >
                     {`Display Fonts`}
                       </DisplayFonts2>
                 </SecTitleFonts>
                 <QuestNativelyTxt >
                   <QuestNativelySupport >
                     {`Quest natively supports all Google Fonts. If you use any custom fonts you can import them here to accurately preview your designs. 

Import TTF, OTF & WOFF files only. Each font weight must be imported individually. This will then work for the design system & every component that uses that font & weight.`}
                       </QuestNativelySupport>
                   <Link3 href="#" underline="hover"  >Learn More</Link3>
                 </QuestNativelyTxt>
               </DisplayFontsRow>
             </Top2>
             <Fonts >
               <Input1 >
                 <FontFileName >
                   {`Font File Name`}
                     </FontFileName>
                 <FontFamilyName >
                   {`Font Family Name`}
                     </FontFamilyName>
                 <FontWeight >
                   {`Font Weight`}
                     </FontWeight>
               </Input1>
               <Frame58 >
                 <Row >
                   <TextField1 >
                     <Container >
                       <Input2 >
                         <FontFileName1 >
                           {`Font File Name`}
                             </FontFileName1>
                       </Input2>
                     </Container>
                   </TextField1>
                   <TextField2 >
                     <Container1 >
                       <Input3 >
                         <FontName >
                           {`Font Name`}
                             </FontName>
                       </Input3>
                     </Container1>
                   </TextField2>
                   <TextField3 >
                     <Container2 >
                       <Input4 >
                         <Q400 >
                           {`400`}
                             </Q400>
                       </Input4>
                     </Container2>
                   </TextField3>
                   <Icon1    fontSize = { "medium"}  component = { Delete1}/>
                 </Row>
                 <Row1 >
                   <TextField4 >
                     <Container3 >
                       <Input5 >
                         <FontFileName2 >
                           {`Font File Name`}
                             </FontFileName2>
                       </Input5>
                     </Container3>
                   </TextField4>
                   <TextField5 >
                     <Container4 >
                       <Input6 >
                         <FontName1 >
                           {`Font Name`}
                             </FontName1>
                       </Input6>
                     </Container4>
                   </TextField5>
                   <TextField6 >
                     <Container5 >
                       <Input7 >
                         <Q4001 >
                           {`400`}
                             </Q4001>
                       </Input7>
                     </Container5>
                   </TextField6>
                   <Icon2    fontSize = { "medium"}  component = { Delete2}/>
                 </Row1>
                 <Row2 >
                   <TextField7 >
                     <Container6 >
                       <Input8 >
                         <FontFileName3 >
                           {`Font File Name`}
                             </FontFileName3>
                       </Input8>
                     </Container6>
                   </TextField7>
                   <TextField8 >
                     <Container7 >
                       <Input9 >
                         <FontName2 >
                           {`Font Name`}
                             </FontName2>
                       </Input9>
                     </Container7>
                   </TextField8>
                   <TextField9 >
                     <Container8 >
                       <Input10 >
                         <Q4002 >
                           {`400`}
                             </Q4002>
                       </Input10>
                     </Container8>
                   </TextField9>
                   <Icon3    fontSize = { "medium"}  component = { Delete3}/>
                 </Row2>
               </Frame58>
             </Fonts>
           </DisplayFonts1>
           <ButtonPadding >
             <ButtonContained1 variant="contained" size="small" color="primary"    > Import Fonts </ButtonContained1>
           </ButtonPadding>
         </DisplayFonts>
       </Column>
       <Space >
       </Space>
       {false &&
           <ImportFontDialog1   />
       }
     </AppSettings1>
   );
}

export default AppSettings;
